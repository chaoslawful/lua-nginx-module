subsystem=http
ngx_addon_name="ngx_${subsystem}_lua_module"

if [ "$HAS_LUA_MODULE" = YES ]; then
    echo "LuaJIT already found (-I$LUAJIT_INC -L$LUAJIT_LIB)"
else

# Find LuaJIT ----------------------------

ngx_found=no
luajit_feature_path=
luajit_feature_libs=
luajit_ld_opt=

find_luajit() {
    if [ $ngx_found = yes ]; then
        return
    fi

    LUAJIT_INC="$1"
    LUAJIT_LIB="$2"
    luajit_ld_opt=$3

    ngx_feature="LuaJIT in ${LUAJIT_INC}${luajit_ld_opt:+ (with $luajit_ld_opt)}"
    ngx_feature_name=
    ngx_feature_path="$LUAJIT_INC"
    ngx_feature_run=no
    ngx_feature_incs=
    ngx_feature_test=

    if [ $NGX_RPATH = YES ]; then
        ngx_feature_libs="-R$LUAJIT_LIB -L$LUAJIT_LIB ${4:--lluajit-5.1} $luajit_ld_opt"
    else
        ngx_feature_libs="-L$LUAJIT_LIB ${4:--lluajit-5.1} $luajit_ld_opt"
    fi

    . auto/feature
}

if [ -n "$LUAJIT_INC" -o -n "$LUAJIT_LIB" ]; then
    echo "LuaJIT explicitly specified via \$LUAJIT_INC and \$LUAJIT_LIB"

    # ensure that -I$LUAJIT_INC and -L$LUAJIT_LIB come first
    SAVED_CC_TEST_FLAGS="$CC_TEST_FLAGS"
    CC_TEST_FLAGS="-I$LUAJIT_INC $CC_TEST_FLAGS"
    SAVED_NGX_TEST_LD_OPT="$NGX_TEST_LD_OPT"
    NGX_TEST_LD_OPT="-L$LUAJIT_LIB $NGX_TEST_LD_OPT"

    if [ "$NGX_PLATFORM" = win32 ]; then
        # LuaJIT's win32 build is named lua51.dll
        find_luajit $LUAJIT_INC $LUAJIT_LIB "" "-llua51"
    else
        # attempt to link with -ldl, static linking on Linux requires it
        find_luajit $LUAJIT_INC $LUAJIT_LIB "-lm -ldl"

        # retry without -ldl
        find_luajit $LUAJIT_INC $LUAJIT_LIB "-lm"
    fi

    CC_TEST_FLAGS="$SAVED_CC_TEST_FLAGS"
    NGX_TEST_LD_OPT="$SAVED_NGX_TEST_LD_OPT"

    if [ $ngx_found = no ]; then
        echo "$0: error: $ngx_addon_name requires the LuaJIT library which could not be found where specified (LUAJIT_INC=$LUAJIT_INC LUAJIT_LIB=$LUAJIT_LIB)."
        echo
        exit 1
    fi
else
    echo "LuaJIT not specified, attempting to auto-detect it..."

    # FreeBSD with LuaJIT-2.0 from ports collection
    find_luajit "/usr/local/include/luajit-2.0" "/usr/local/lib" "-lm"

    # Gentoo with LuaJIT-2.0, try with -ldl
    find_luajit "/usr/include/luajit-2.0" "/usr/lib" "-lm -ldl"

    # Gentoo with LuaJIT 2.0, without -ldl
    find_luajit "/usr/include/luajit-2.0" "/usr/lib" "-lm"

    if [ $ngx_found = no ]; then
        echo "$0: error: $ngx_addon_name requires the LuaJIT library but could not auto-detect it."
        echo
        exit 1
    fi
fi

case "$NGX_PLATFORM" in
    Darwin:*)
        case "$NGX_MACHINE" in
            amd64 | x86_64 | i386)
                echo "adding extra linking options needed by LuaJIT on $NGX_PLATFORM"
                luajit_ld_opt="$luajit_ld_opt -pagezero_size 10000 -image_base 100000000"
                ngx_feature_libs="$ngx_feature_libs -pagezero_size 10000 -image_base 100000000"
            ;;

            *)
            ;;
        esac
    ;;

    *)
    ;;
esac

luajit_feature_path="$ngx_feature_path"
luajit_feature_libs="$ngx_feature_libs"

# Check LuaJIT ---------------------------

ngx_feature="LuaJIT 2.x"
ngx_feature_path="$LUAJIT_INC"
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <luajit.h>"
ngx_feature_test="#if !defined(LUAJIT_VERSION_NUM) || LUAJIT_VERSION_NUM < 20000
                  #    error unsupported LuaJIT version
                  #endif"

SAVED_CC_TEST_FLAGS="$CC_TEST_FLAGS"
CC_TEST_FLAGS="-Wno-endif-labels $CC_TEST_FLAGS"

. auto/feature

if [ $ngx_found = no ]; then
    echo "$0: error: unsupported LuaJIT version; $ngx_addon_name requires LuaJIT 2.x."
    echo
    exit 1
fi

# ----------------------------------------

ngx_feature="Lua language 5.1"
ngx_feature_path="$LUAJIT_INC"
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <lua.h>"
ngx_feature_test="#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM != 501
                  #   error unsupported Lua language version
                  #endif"

. auto/feature

if [ $ngx_found = no ]; then
    echo "$0: error: unsupported Lua language version; $ngx_addon_name requires Lua 5.1."
    echo
    exit 1
fi

CC_TEST_FLAGS="$SAVED_CC_TEST_FLAGS"

# ----------------------------------------

ngx_feature="LuaJIT has FFI"
ngx_feature_path="$LUAJIT_INC"
ngx_feature_libs="$LUAJIT_LIB/libluajit-5.1.a $luajit_ld_opt"
ngx_feature_run=yes
ngx_feature_incs="#include <lualib.h>
                  #include <lauxlib.h>
                  #include <assert.h>"
ngx_feature_test="lua_State *L = luaL_newstate();
                  assert(L != NULL);
                  luaopen_ffi(L);"

. auto/feature

if [ $ngx_found = no ]; then
    echo "$0: error: unsupported LuaJIT build; $ngx_addon_name requires LuaJIT with FFI enabled."
    echo
    exit 1
fi

# Linker options -------------------------

ngx_feature="export symbols by default (-E)"
ngx_feature_path=
ngx_feature_libs="-Wl,-E"
ngx_feature_run=no
ngx_feature_incs="#include <stdio.h>"
ngx_feature_test='printf("hello");'

. auto/feature

if [ $ngx_found = yes ]; then
    CORE_LIBS="-Wl,-E $CORE_LIBS"
fi

# ----------------------------------------

# for Cygwin
ngx_feature="export symbols by default (--export-all-symbols)"
ngx_feature_path=
ngx_feature_libs="-Wl,--export-all-symbols"
ngx_feature_run=no
ngx_feature_incs="#include <stdio.h>"
ngx_feature_test='printf("hello");'

. auto/feature

if [ $ngx_found = yes ]; then
    CORE_LIBS="-Wl,--export-all-symbols $CORE_LIBS"
fi

# ----------------------------------------

if [ $USE_PCRE = YES -o $PCRE != NONE ] && [ $PCRE != NO -a $PCRE != YES ]; then
    # force pcre_version symbol to be required when PCRE is statically linked
    case "$NGX_PLATFORM" in
        Darwin:*)
            ngx_feature="require defined symbols (-u)"
            ngx_feature_name=
            ngx_feature_path=
            ngx_feature_libs="-Wl,-u,_strerror"
            ngx_feature_run=no
            ngx_feature_incs="#include <stdio.h>"
            ngx_feature_test='printf("hello");'

            . auto/feature

            if [ $ngx_found = yes ]; then
                CORE_LIBS="-Wl,-u,_pcre_version $CORE_LIBS"
            fi
        ;;

        *)
            ngx_feature="require defined symbols (--require-defined)"
            ngx_feature_name=
            ngx_feature_path=
            ngx_feature_libs="-Wl,--require-defined=strerror"
            ngx_feature_run=no
            ngx_feature_incs="#include <stdio.h>"
            ngx_feature_test='printf("hello");'

            . auto/feature

            if [ $ngx_found = yes ]; then
                CORE_LIBS="-Wl,--require-defined=pcre_version $CORE_LIBS"

            else
                # ld 2.25 and below (--required-defined was introduced in 2.26)
                ngx_feature="require defined symbols fallback (--undefined)"
                ngx_feature_name=
                ngx_feature_path=
                ngx_feature_libs="-Wl,--undefined=strerror"
                ngx_feature_run=no
                ngx_feature_incs="#include <stdio.h>"
                ngx_feature_test='printf("hello");'

                . auto/feature

                if [ $ngx_found = yes ]; then
                    CORE_LIBS="-Wl,--undefined=pcre_version $CORE_LIBS"
                fi
            fi
        ;;
    esac
fi

fi # HAS_LUA_MODULE

# Setup module ---------------------------

if [ $subsystem = http ]; then
    ngx_module_type=HTTP_AUX_FILTER
else
    ngx_module_type=STREAM
fi

ngx_module_name=$ngx_addon_name
ngx_module_deps=$(find $ngx_addon_dir/src -name '*.h' -printf '%p ')
ngx_module_srcs=$(find $ngx_addon_dir/src -name '*.c' -printf '%p ')

. auto/module

if [ "$HAS_LUA_MODULE" != YES ]; then
    CORE_INCS="$CORE_INCS $luajit_feature_path"
    CORE_LIBS="$CORE_LIBS $luajit_feature_libs"

    # persuade nginx's build system to favor the paths set by our user environment
    CFLAGS="-I $LUAJIT_INC -DNDK_SET_VAR $CFLAGS"
    NGX_LD_OPT="-L $LUAJIT_LIB $NGX_LD_OPT"
fi

# Features -------------------------------

SUBSYSTEM=$(echo $subsystem | tr '[a-z]' '[A-Z]')

SAVED_CC_TEST_FLAGS="$CC_TEST_FLAGS"
CC_TEST_FLAGS="-Werror -Wall $CC_TEST_FLAGS"

ngx_feature="SO_PASSCRED"
ngx_feature_name="NGX_${SUBSYSTEM}_LUA_HAVE_SO_PASSCRED"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <sys/types.h>
                  #include <sys/socket.h>"
ngx_feature_test="setsockopt(1, SOL_SOCKET, SO_PASSCRED, NULL, 0);"

. auto/feature

ngx_feature="SA_RESTART"
ngx_feature_name="NGX_${SUBSYSTEM}_LUA_HAVE_SA_RESTART"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <signal.h>"
ngx_feature_test="struct sigaction act;
                  act.sa_flags = SA_RESTART;
                  sigaction(SIGINT, NULL, &act);"

. auto/feature

if [ $subsystem = http ]; then

ngx_feature="malloc_trim"
ngx_feature_name="NGX_HTTP_LUA_HAVE_MALLOC_TRIM"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=yes
ngx_feature_incs="#include <malloc.h>
                  #include <stdio.h>"
ngx_feature_test='int rc = malloc_trim((size_t) 0);
                  printf("%d", rc);'

. auto/feature

ngx_feature="pipe2"
ngx_feature_name="NGX_HTTP_LUA_HAVE_PIPE2"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <fcntl.h>"
ngx_feature_test="int fd[2];
                  pipe2(fd, O_CLOEXEC|O_NONBLOCK);"

. auto/feature

ngx_feature="signalfd"
ngx_feature_name="NGX_HTTP_LUA_HAVE_SIGNALFD"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs="#include <sys/signalfd.h>"
ngx_feature_test="sigset_t set;
                  signalfd(-1, &set, SFD_NONBLOCK|SFD_CLOEXEC);"

. auto/feature

ngx_feature="execvpe"
ngx_feature_name="NGX_HTTP_LUA_HAVE_EXECVPE"
ngx_feature_path=
ngx_feature_libs=
ngx_feature_run=no
ngx_feature_incs=
ngx_feature_test='char* argv[] = {"/bin/sh"};
                  execvpe("/bin/sh", argv, NULL);'

. auto/feature

fi # subsystem = http

CC_TEST_FLAGS="$SAVED_CC_TEST_FLAGS"

# ----------------------------------------

HAS_LUA_MODULE=YES
USE_MD5=YES
USE_SHA1=YES

CORE_INCS="$CORE_INCS $ngx_addon_dir/src/api"

if [ $subsystem = http ]; then
    NGX_DTRACE_PROVIDERS="$NGX_DTRACE_PROVIDERS $ngx_addon_dir/dtrace/ngx_lua_provider.d"
    NGX_TAPSET_SRCS="$NGX_TAPSET_SRCS $ngx_addon_dir/tapset/ngx_lua.stp"
fi

#CFLAGS=$"$CFLAGS -DLUA_DEFAULT_PATH='\"/usr/local/openresty/lualib/?.lua\"'"
#CFLAGS=$"$CFLAGS -DLUA_DEFAULT_CPATH='\"/usr/local/openresty/lualib/?.so\"'"

# vi:set ft=sh ts=4 sts=4 sw=4 et:
